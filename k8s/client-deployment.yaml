apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: client
  name: client
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: client
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/network: "true"
        io.kompose.service: client
    spec:
      containers:
        - env:
            - name: API_HOST
              valueFrom:
                configMapKeyRef:
                  key: API_HOST
                  name: variables-env
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                configMapKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: variables-env
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: variables-env
            - name: BROKER_URL
              valueFrom:
                configMapKeyRef:
                  key: BROKER_URL
                  name: variables-env
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_URL
                  name: variables-env
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: variables-env
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_HOST
                  name: variables-env
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PASSWORD
                  name: variables-env
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: variables-env
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_USER
                  name: variables-env
            - name: RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_HOST
                  name: variables-env
            - name: RABBITMQ_PASS
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_PASS
                  name: variables-env
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_PORT
                  name: variables-env
            - name: RABBITMQ_USER
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_USER
                  name: variables-env
            - name: REDIS_DB
              valueFrom:
                configMapKeyRef:
                  key: REDIS_DB
                  name: variables-env
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: REDIS_HOST
                  name: variables-env
            - name: REDIS_PASS
              valueFrom:
                configMapKeyRef:
                  key: REDIS_PASS
                  name: variables-env
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: REDIS_PORT
                  name: variables-env
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  key: REDIS_URL
                  name: variables-env
            - name: S3_HOST
              valueFrom:
                configMapKeyRef:
                  key: S3_HOST
                  name: variables-env
          image: gcr.io/tcc-lucas-pierre/client:latest
          name: fashion-client
          ports:
            - containerPort: 8888
          resources: {}
          volumeMounts:
            - mountPath: /home/jovyan/data
              name: client-claim0
      restartPolicy: Always
      securityContext:
        runAsUser: 1000
        runAsGroup: 100
        fsGroup: 100
      volumes:
        - name: client-claim0
          persistentVolumeClaim:
            claimName: client-claim0
status: {}
